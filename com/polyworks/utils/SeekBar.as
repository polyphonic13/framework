package com.polyworks.utils{	import flash.display.Sprite;	public class SeekBar extends Sprite	{		import flash.display.Shape;				import flash.events.MouseEvent;		import flash.geom.Rectangle;				import com.polyworks.utils.LoadProgressBar;		//		import com.mp3Player.events.*;				private var _loadBar:LoadProgressBar;				private var _played:Shape;		private var _playedMask:Shape;		private var _seekBtn:Sprite;		private var _bounds:Rectangle; 		private var _seekBarMask:Shape;				private var _startX:Number;		private var _endX:Number;		private var _end:Number = 0; 				private var _playUpdate:Boolean = false;		private var _dragging:Boolean = false; 				public function SeekBar(width:Number, height:Number = 2, btnWidth:Number = 4, btnHeight:Number = 6,								startX:Number = 0, endX:Number = 0,								emptyColor:Number = 0x000000, loadedColor:Number = 0x666666,								playedColor:Number = 0xFF0000, btnColor:Number = 0xCCCCCC)		{						_startX = startX;						if(endX > 0)			{				_endX = endX;			}			else			{				_endX = width;			}			_loadBar = new LoadProgressBar(width, height, emptyColor, loadedColor);						_played = _makeShape(playedColor, width, height);			_playedMask = _makeShape(playedColor, width, btnHeight);						_played.mask = _playedMask;			_played.y = 0;						_playedMask.x = _startX-(_played.width);			_playedMask.y = -(height/2);						_seekBtn = new Sprite();			var _seekShape = _makeShape(btnColor, btnWidth, btnHeight);			_seekBtn.addChild(_seekShape);			_seekBtn.x = _startX;			_seekBtn.y = (-(btnHeight/2))+(height/2);			_bounds = new Rectangle(_startX, (-(btnHeight/2))+(height/2), _endX, 0.1);/*			_seekBarMask = _makeShape(emptyColor, width, btnHeight);			_seekBarMask.y = (-(btnHeight/2))+(height/2);			this.mask = _seekBarMask;			*/			addChild(_loadBar);			addChild(_played);			addChild(_playedMask);			addChild(_seekBtn);//			addChild(_seekBarMask);						_seekBtn.addEventListener(MouseEvent.MOUSE_DOWN, _startDrag);			_seekBtn.addEventListener(MouseEvent.MOUSE_UP, _stopDrag);			this.addEventListener(MouseEvent.MOUSE_UP, _stopDrag);		}				public function updateLoaded(amount:Number, end:Number):void		{						_loadBar.updateLoaded(amount, end);					}				public function updatePlayed(amount:Number, end:Number):void		{			if(!_dragging)			{				_end = end;				_playedMask.x = _startX + (newX(amount, end) - _playedMask.width);				_seekBtn.x = _startX + newX(amount, end);			}		}				public function reset():void		{			_loadBar.reset();			resetPlayed();		}				public function resetPlayed():void		{			_playedMask.x = -_playedMask.width;			_seekBtn.x = 0;			_end = 0;		}		public function getDragging():Boolean		{			return _dragging;		}		public function setMouseOff():void		{			_postDrag();		}				private function _makeShape(color:Number, width, height):Shape		{			var square:Shape = new Shape();						square.graphics.lineStyle(2, color);			square.graphics.beginFill(color);			square.graphics.drawRect(0, 0, width, height);			square.graphics.endFill();						return square;		}					private function _makeBtn(color:Number, width, height):Shape		{					var square:Shape = new Shape();						square.graphics.lineStyle(1, color);			square.graphics.beginFill(color);			square.graphics.drawRect(0, 0, width, height);			square.graphics.endFill();						return square;		}				private function newX(amount:Number, end:Number):Number		{			var	val:Number = new Number();			val = Math.floor((amount * _endX)/end);						return val;		}							private function _startDrag(evt:MouseEvent):void		{			_dragging = true;			_seekBtn.startDrag(false, _bounds);		}				private function _stopDrag(evt:MouseEvent):void		{			_postDrag();		}				private function _postDrag():void		{			if(_end > 0)			{				_playedMask.x = _seekBtn.x - _playedMask.width;				_dragging = false;				_seekBtn.stopDrag();								var val:Number = Math.round(((_seekBtn.x - _startX)/_endX)* _end);/*								var m3Event:Mp3Event = new Mp3Event(Mp3Events.SEEK, val);				dispatchEvent(m3Event);*/							}		}	}}